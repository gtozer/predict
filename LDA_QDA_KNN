```{r}
#LDA (change method to "qda" for QDA)

set.seed(2020)

fitLDA <- train(openedAccount ~ . -agegroup -newcustomer -euribor3m -emp.var.rate -default, family='binomial', data=dfTrain, method='lda', trControl=trainControl(method='cv', number=10))

resultsLDA <- 
  fitLDA %>%
  predict(dfTest, type='raw') %>%
  bind_cols(dfTest, predictedClass=.)

resultsLDA %>% 
  xtabs(~predictedClass+openedAccount, .) %>% 
  confusionMatrix(positive = '1')

```

```{r}
#QDA (change method to "lda" for LDA)

set.seed(2020)

fitQDA <- train(openedAccount ~ . -agegroup -newcustomer -euribor3m -emp.var.rate -default, family='binomial', data=dfTrain, method='qda', trControl=trainControl(method='cv', number=10))

resultsQDA <- 
  fitQDA %>%
  predict(dfTest, type='raw') %>%
  bind_cols(dfTest, predictedClass=.)

resultsQDA %>% 
  xtabs(~predictedClass+openedAccount, .) %>% 
  confusionMatrix(positive = '1')

```

```{r}
#KNN

set.seed(2020)

fitKNN <- train(openedAccount ~ ., data=dfTrain, method='knn', trControl=trainControl(method='cv', number=10), tuneLength = 10, preProcess = c("center", "scale"))

resultsKNN <- 
  fitKNN %>%
  predict(dfTest, type='raw') %>%
  bind_cols(dfTest, predictedClass=.)

resultsKNN %>% 
  xtabs(~predictedClass+openedAccount, .) %>% 
  confusionMatrix(positive = '1')

#See how accuracy changes as the algorithm iterates through different Ks:
plot(fitKNN) #You can run just fitKNN to see it as a table

#See the optimum k value:
fitKNN$bestTune

#See the final model output:
fitKNN$finalModel

```

